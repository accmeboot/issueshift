// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package _model

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    email, name, password_hash, avatar_url
) VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Email        string
	Name         string
	PasswordHash []byte
	AvatarUrl    sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.PasswordHash,
		arg.AvatarUrl,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE email = $1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, email)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, name, created_at, avatar_url FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.CreatedAt,
		&i.AvatarUrl,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = $1, avatar_url = $2 WHERE email = $3 RETURNING name, email, avatar_url
`

type UpdateUserParams struct {
	Name      string
	AvatarUrl sql.NullString
	Email     string
}

type UpdateUserRow struct {
	Name      string
	Email     string
	AvatarUrl sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Name, arg.AvatarUrl, arg.Email)
	var i UpdateUserRow
	err := row.Scan(&i.Name, &i.Email, &i.AvatarUrl)
	return i, err
}
